version: '3.7'
services:
  nginx:
    restart: always
    hostname: "${APP_NAME}_nginx"
    image: "${APP_NAME}_nginx"
    container_name: "${APP_NAME}_nginx"
    build:
      context: .
      dockerfile: ./environments/development/Dockerfile-nginx
    volumes:
      - ${APPLICATION}:/var/www/html
      - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
    ports:
      - ${NGINX_HOST_HTTP_PORT}:80
      - ${NGINX_HOST_HTTPS_PORT}:443
    links:
      - app
    networks:
      - app_network

  app:
    restart: always
    hostname: "${APP_NAME}_app"
    image: "${APP_NAME}_php"
    container_name: "app"
    build:
      context: .
      dockerfile: Dockerfile
      args:
        APP_DEBUG: ${APP_DEBUG}
    ports:
      - ${FPM_PORT}:9000
    volumes:
      - ${APPLICATION}:/var/www/html
    environment:
      - COMPOSER_MEMORY_LIMIT=-1
      - PHP_IDE_CONFIG="serverName=Localhost"
    links:
      - mysql
      - rabbitmq
    depends_on:
      - rabbitmq
    networks:
      - app_network

  mysql:
    restart: always
    hostname: "${APP_NAME}_mysql"
    image: "${APP_NAME}_mysql"
    container_name: "${APP_NAME}_mysql"
    build:
      context: .
      dockerfile: ./environments/development/Dockerfile-mysql
    command: ["mysqld", "--default-authentication-plugin=mysql_native_password"]
    ports:
      - ${DB_PORT}:3306
    volumes:
      - database:/var/lib/mysql
    environment:
      - MYSQL_DATABASE=${DB_DATABASE}
      - MYSQL_USER=${DB_USERNAME}
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
    networks:
      app_network:
        aliases:
          - mysql

  elasticsearch:
    hostname: "${APP_NAME}_elasticsearch"
    image: "${APP_NAME}_elasticsearch"
    container_name: "${APP_NAME}_elasticsearch"
    build:
      context: .
      dockerfile: ./environments/development/Dockerfile-elasticsearch
    ports:
      - ${ELASTIC_HTTP}:9200
      - ${ELASTIC_HTTPS}:9300
    environment:
      discovery.type: "single-node"
      ES_JAVA_OPTS: "-Xms2g -Xmx2g"
      xpack.security.enabled: "false"
      xpack.monitoring.templates.enabled: "true"
    volumes:
      - esdata:/usr/share/elasticsearch/data
    networks:
      - app_network

  kibana:
    hostname: "${APP_NAME}_kibana"
    image: "${APP_NAME}_kibana"
    container_name: "${APP_NAME}_kibana"
    build:
      context: .
      dockerfile: ./environments/development/Dockerfile-kibana
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      ELASTICSEARCH_URL: ${ELASTIC_HOST}
    depends_on:
      - elasticsearch
    links:
      - elasticsearch
    networks:
      - app_network

  rabbitmq:
    hostname: "${APP_NAME}_rabbitmq"
    image: "${APP_NAME}_app_rabbitmq"
    container_name: "${APP_NAME}_rabbitmq"
    build:
      context: .
      dockerfile: ./environments/development/Dockerfile-rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    volumes:
      - rmqdata:/var/lib/rabbitmq
    ports:
      - ${RABBITMQ_PORT}:5672
      - ${RABBITMQ_PORT_HTTPS}:15672
    networks:
      - app_network

  redis:
    hostname: "${APP_NAME}_redis"
    image: "${APP_NAME}_redis"
    container_name: "${APP_NAME}_redis"
    build:
      context: .
      dockerfile: ./environments/development/Dockerfile-redis
    ports:
      - ${REDIS_PORT}:6379
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
    volumes:
      - cache:/data
    depends_on:
      - app
    links:
      - app
    networks:
      - app_network

volumes:
  database:
    name: ${APP_NAME}_db_vol
  rmqdata:
    name: ${APP_NAME}_rmq_vol
  cache:
    name: ${APP_NAME}_cache_vol
  esdata:
    name: ${APP_NAME}_es_vol 
    driver: local

networks:
  app_network:
    driver: bridge
    name: ${APP_NAME}_network
